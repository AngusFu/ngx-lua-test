worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        # location /s {
        #     default_type text/html;
        #     access_by_lua_block {
        #         local ETAG = 'aDwFxEXdkel=='
        #         local etag = ngx.header['If-None-Match'] or ngx.header['If-Match']
        #         if etag ~= '' and etag == ETAG then
        #             ngx.status = ngx.HTTP_NOT_MODIFIED
        #         else
        #             ngx.status = ngx.HTTP_OK
        #             ngx.header['Etag'] = ETAG
        #             ngx.header.content_type = 'public, max-age=31536000, no-cache'
        #             ngx.req.read_body()
        #             ngx.say(ngx.req.get_body_data() or 'ok')
        #         end
        #     }
        # }
        # test
        location ~ (\d+)\.js {
            access_by_lua_block {
                local guid = ngx.var.cookie___guid
                if not guid then
                    guid = math.random()
                    ngx.header['Set-Cookie'] = "__guid=" .. guid
                end
                ngx.ctx.guid = guid
                ngx.header['Content-Type'] = 'text/javascript'
            }
    
            content_by_lua_block {
                local guid = ngx.ctx.guid
                local num = guid and tonumber(string.sub(guid, -1)) or nil
                local type = math.fmod(num, 3) == 0 and 'new' or 'base'

                ngx.header['X-Custom-V'] = v

                if type == 'base' then
                    ngx.exec('@base', ngx.var.args)
                else
                    ngx.exec('@new', ngx.var.args)
                end
            }
        }

        location @base {
            internal;
            content_by_lua_block {
                ngx.say('console.log("version base:' .. ngx.req.get_uri_args()["t"] .. '")')
            }
        }

        location @new {
            internal;
            content_by_lua_block {
                ngx.say('console.log("version new:' .. ngx.req.get_uri_args()["t"] .. '")')
            }
        }
    }
}
